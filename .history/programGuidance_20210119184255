The requirements for the app are:

Users can search for Pokemon by name or type
The endpoint is GET /pokemon
The search options for either name or type are provided in query string parameters.
When searching by name, users are searching for whether the Pokemon's name 
includes a specified string. The search should be case insensitive.
When searching by type, users must specify one of the valid types.
The API responds with an array of full pokedex entries for the search results
Users can request a list of all the valid types of Pokemon.
The endpoint is GET /types
Both endpoints are public and only respond when given a valid Authorization header 
with a Bearer API token value.
Both endpoints should have general security in place

1. Make a new project for this application called pokedex-api, 
initialize it as an NPM project and Git, set up a .gitignore, 
install express, nodemon and set up the server.js file.

mkdir pokedex-api && cd $_
npm init -y
git init
echo "node_modules" > .gitignore
echo "console.log('hello')" > server.js
npm install express morgan
npm install nodemon -D

2. You can open the project in your editor and update the package.json 
scripts to read like so:

"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js"
},

3. Check that everything in the scripts work so far with a quick npm start, 
this should log "hello" to the console.
Now we can wire up a minimal express application inside server.js.
Make an express app that listens to a port (e.g. 8000), we can tell it to 
always respond with "Hello, world!" at first and add morgan logging. Change 
the contents of server.js to the following:

const express = require('express')
const morgan = require('morgan')

const app = express()

app.use(morgan('dev'))

app.use((req, res) => {
  res.send('Hello, world!')
})

const PORT = 8000

app.listen(PORT, () => {
  console.log(`Server listening at http://localhost:${PORT}`)
})


4. Create API_TOKEN environment


STEPS TO DEPLOY SERVER USING HEROKU

1.  $ heroku login

The heroku login command will prompt new Heroku 
related files to be downloaded and then you'll be 
prompted to enter your user name and password.

2. Hide Secrets
  a. Make sure you're using variables such as process.env.API_TOKEN 
  in your code rather than typing the value of the key in your code.

  b. You should already have .env file to store secrets as a convenient 
  configuration for a local environment. Make sure this file is listed 
  in your .gitignore file so that the secrets inside it don't find a way into your git commits

3. Find the code in your Pokedex API that sets the PORT value for app.listen and change 
it to respect an environmental variable if available. Now when you deploy this application, 
Heroku can control which PORT the application will listen to.

- const PORT = 8000
+ const PORT = process.env.PORT || 8000

  app.listen(PORT, () => {
    console.log(`Server listening at http://localhost:${PORT}`)
  })

4. When we deploy to production, Heroku will set this environmental 
variable to a value of "production". So, we can check to see if the NODE_ENV 
is set to "production" or not, and set the value for morgan as appropriate.

- app.use(morgan('common'))
+ const morganSetting = process.env.NODE_ENV === 'production' ? 'tiny' : 'common'
+ app.use(morgan(morganSetting))

5. Hide sensitive server error messages
Make sure you have an error-handling middleware in your application that responds 
with a friendly error message. This should be the last middleware in your pipeline.

// 4 parameters in middleware, express knows to treat this as error handler
app.use((error, req, res, next) => {
  let response
  if (process.env.NODE_ENV === 'production') {
    response = { error: { message: 'server error' }}
  } else {
    response = { error }
  }
  res.status(500).json(response)
})

const PORT = process.env.PORT || 8000

6. Use a different API_Token
Generate a production UUID to use only for production, we'll set this on our Heroku 
application's production environment as an environmental variable. We'll do this straight 
after deploying our application.

7. Make and config a new file in your project's root directory called Procfile

$ touch Procfile

The content of the Procfile is:
web: node server.js

8. Specify Node version

  "main": "index.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [],
+ "engines": {
+   "node": "10.11.0"
+ },

9. Audit packages that will look in the Node modules we've installed for any known 
security vulnerabilities
If you see any issues listed, you can run npm audit --fix to resolve the issues by 
installing different versions of these dependencies.

$ npm audit

10. Deploy

$ heroku create
$ git remote -value
$ git push heroku master

11. To check that the deploy has worked, we can read the logs in our Heroku application 
by using the following command:

$ heroku logs

12. With the source code pushed to Heroku and the application installed and started, we can 
specify the number of dynos our application needs. For now, we'll use our one free dyno:

$ heroku ps:scale web=1

13. Add production API_TOKEN

$ heroku config:set API_TOKEN=paste-your-token-here

14.  In the React module, we used NPM hooks to automate various steps for deploying, 
we composed different scripts together to perform checks. Let's do the same for our 
Pokedex app. The steps for deploying this application would be audit, test if you have 
them and deploy. Add the following scripts to your package.json.

    "start": "node server.js",
    "dev": "nodemon server.js",
+   "predeploy": "npm audit",
+   "deploy": "git push heroku main"